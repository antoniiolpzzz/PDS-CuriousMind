package com.pds.curiousmind.model.contentblock;

import com.pds.curiousmind.model.question.Question;
import jakarta.persistence.*;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * Represents a content block in a course, containing a list of questions and associated metadata.
 * <p>
 * Each content block has a unique identifier, a name, a difficulty level, and a list of questions.
 * The questions are stored in the database and are eagerly fetched with the content block.
 * This class is mapped to the "content_blocks" table in the database using JPA annotations.
 *
 * <ul>
 *   <li><b>id</b>: Primary key, auto-generated by the database.</li>
 *   <li><b>name</b>: Name of the content block. Cannot be null.</li>
 *   <li><b>difficulty</b>: Difficulty level of the content block. Cannot be null.</li>
 *   <li><b>questions</b>: List of questions associated with this content block. Cannot be null. Fetched eagerly.</li>
 * </ul>
 *
 * <p>Typical usage:</p>
 * <pre>
 *     ContentBlock block = new ContentBlock("Introduction", Difficulty.EASY, questionsList);
 * </pre>
 *
 * @author Antonio
 * @since 1.0
 */
@Entity
@Table(name = "content_blocks")
public class ContentBlock {
    /**
     * The unique identifier for this content block.
     * <p>
     * This field is the primary key and is auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Name of the content block.
     * <p>
     * This field is mandatory and cannot be null.
     */
    @Column(name = "name", nullable = false)
    private String name;

    /**
     * Difficulty level of the content block.
     * <p>
     * This field is mandatory and cannot be null.
     */
    @Enumerated(EnumType.ORDINAL)
    @Column(name = "difficulty", nullable = false)
    private Difficulty difficulty;

    /**
     * List of questions associated with this content block.
     * <p>
     * This field is mandatory and cannot be null.
     * The questions are fetched eagerly and are orphaned if removed.
     */
    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER, orphanRemoval = true)
    @JoinColumn(name = "content_block_id", nullable = false)
    private List<Question> questions = new ArrayList<>();

    /**
     * Default constructor for JPA.
     * Initializes an empty content block.
     */
    public ContentBlock() {
    }

    /**
     * Constructs a content block with the specified name, difficulty, and list of questions.
     *
     * @param name the name of the content block
     * @param difficultyLevel the difficulty level of the content block
     * @param questions the list of questions for this content block
     */
    public ContentBlock(String name, Difficulty difficultyLevel, List<Question> questions) {
        this.name = name;
        this.questions = new ArrayList<>(questions);
        this.difficulty = difficultyLevel;
    }

    /**
     * Returns the unique identifier of this content block.
     *
     * @return the id of the content block
     */
    public Long getId() {
        return id;
    }

    /**
     * Returns the name of this content block.
     *
     * @return the name of the content block
     */
    public String getName() {
        return name;
    }

    /**
     * Returns an unmodifiable list of questions in this content block.
     *
     * @return the list of questions
     */
    public List<Question> getQuestions() {
        return Collections.unmodifiableList(questions);
    }

    /**
     * Returns the difficulty level of this content block.
     *
     * @return the difficulty level
     */
    public Difficulty getDifficulty() {
        return difficulty;
    }

    /**
     * Sets the unique identifier for this content block.
     *
     * @param id the id to set
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Sets the name of this content block.
     *
     * @param name the name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Sets the list of questions for this content block.
     * Makes a defensive copy of the provided list.
     *
     * @param questions the list of questions to set
     */
    public void setQuestions(List<Question> questions) {
        this.questions = new ArrayList<>(questions);
    }

    /**
     * Sets the difficulty level of this content block.
     *
     * @param difficulty the difficulty level to set
     */
    public void setDifficulty(Difficulty difficulty) {
        this.difficulty = difficulty;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        ContentBlock that = (ContentBlock) o;
        return id != null && id.equals(that.id);
    }

    @Override
    public int hashCode() {
        return id != null ? id.hashCode() : 0;
    }

    @Override
    public String toString() {
        return "ContentBlock{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", difficulty=" + difficulty +
                '}';
    }
}
